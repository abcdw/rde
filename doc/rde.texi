\input texinfo    @c -*- texinfo -*-

@c %**start of header
@setfilename rde.info
@settitle rde Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@include version.texi
@set WEB-PAGE https://trop.in/rde

@copying
This manual is for rde, version @value{VERSION}.

Copyright @copyright{} 2021 Andrew Tropin@*
@end copying

@dircategory System administration
@direntry
* rde: (guix).       Manage operating systems, dotfiles and development environments.
@end direntry

@dircategory Software development
@direntry
* rde Emacs: (rde)Emacs.      Emacs configuration with vanilla flavor.
@end direntry

@c @finalout
@titlepage
@title rde Manual
@author The rde Developers

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@node Top
@top rde

This document describes rde version @value{VERSION}, a set of tools
for managing development environments, home environments, and
operating systems.

@menu
* Introduction::                What rde is?
* Approaching Free Software::   How to explore, learn and use?
* Getting Started::             Try, customize and install.   @c                 \
* Features::                    All the parts of rde.         @c  ================\
* Contributing::                Tips and guidelines.          @c  ================/
* FAQ::                         Frequently asked questions.   @c                 /

* Acknowledgments::             Thanks!
* Concept Index::               Concepts.

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Principles::
@c * Usage::
@c * Guix Home::

@c Principles

@c * Main::
@c * Secondary::

@c Guix Home

@c * People's Guix Home configurations::

@c Just a screenshot

@c * Tools::

@c Contributing

@c * New features, fixes or ideas: New features fixes or ideas. 
@c * Documentation::

@end detailmenu
@end menu

@node Introduction
@chapter rde

Set of tools for managing development environments, home environments
and operating systems.

@strong{Disclaimer:} The project is in an active development stage.

@multitable {aaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaa}
@headitem Purpose
@tab Tool
@item Window Manager
@tab Sway
@item Terminal
@tab Alacritty
@item Login Shell
@tab Bash
@item Interactive Unix Shell
@tab Zsh
@item Service Manager/Init
@tab Shepherd
@item Filesystem
@tab Btrfs
@item Everything Else (:
@tab Emacs
@end multitable

rde heavily relies on Guix Home and Guix System, it's able to provide
both a @code{home-environment} and @code{operating-system} records, which can be
used by @code{guix home} and @code{guix system} respectively.  It's not ready for
wide audience yet, but for very curious people: my current @uref{rde/examples/abcdw/configs.scm, config} is
here and I use following commands to apply it:

@example
git clone https://git.sr.ht/~abcdw/rde
cd rde
make
@end example

Read more about @code{home-environment} at @uref{http://guix.gnu.org/en/manual/devel/en/guix.html#Home-Configuration, Home Configuration}.

GNU Guix and git should be installed before invoking commands above.

The alternative and more apropriate way to use rde will be described
later.

@c @menu
@c * Principles::
@c * Usage::
@c * Guix Home::
@c * Channel introduction::
@c * Just a screenshot::
@c * Community::
@c @end menu

@node Principles
@section Principles

@c @node Main
@subsection Main

@table @asis
@item Ergonomic
Sane keybindings, good contrast, readable fonts.
@item Reproducible
Setup can be easily replicated.
@item Hackable
Easy to throw out or modify any part of setup.
@item Stateless
All state must be explicit and syncable or temporary.
@end table

@c @node Secondary
@subsection Secondary

@table @asis
@item Lightweight and battery efficient
wayland, fast native apps.
@item Offline
most of workflows and apps should work without network.
@item Attention-friendly
minimal use of notification and other
distractive things.
@end table

@node Channel introduction
@section Channel introduction

In case you want to use rde as a channel, add the following code to
your @code{~/.config/guix/channels.scm}, and call @code{guix pull}.
@example
(cons*
 (channel
  (name 'rde)
  (url "https://git.sr.ht/~abcdw/rde")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
 %default-channels)
@end example


@node Approaching Free Software
@chapter Approaching Free Software

The explanation will go here.

@node Getting Started
@chapter Getting Started

@node Features
@chapter rde Features

@node Contributing
@chapter Contributing

@menu
* New features, fixes or ideas: New features fixes or ideas.
* Documentation::
* Community::
@end menu

@node New features fixes or ideas
@section New features, fixes or ideas

Send mails, optionally with inline patches to rde-devel mailing list.

@node Documentation
@section Documentation

For Guix Home documentation maintained in @uref{https://git.savannah.gnu.org/cgit/guix.git/tree/doc, guix repo}.


Emacs how undo works
https://casouri.github.io/note/2021/visual-undo-tree/index.html

@node Community
@section Community

There are a few @uref{https://lists.sr.ht/~abcdw, mailing lists} you can subscribe and/or post with your
existing email account:
@table @asis
@item @uref{https://lists.sr.ht/~abcdw/rde-announce/, ~abcdw/rde-announce@@lists.sr.ht}
for news and updates.
@item @uref{https://lists.sr.ht/~abcdw/rde-discuss/, ~abcdw/rde-discuss@@lists.sr.ht}
for discussions and questions.
@item @uref{https://lists.sr.ht/~abcdw/rde-devel/, ~abcdw/rde-devel@@lists.sr.ht}
for patches and development related
discussions.
@end table

@node FAQ
@chapter FAQ

@node Acknowledgments
@chapter Acknowledgments

@node Concept Index
@unnumbered Concept Index
@printindex cp

@bye
