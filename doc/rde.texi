\input texinfo    @c -*- texinfo -*-

@c %**start of header
@setfilename rde.info
@settitle rde Manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@include version.texi
@set WEB-PAGE https://trop.in/rde

@copying
This manual is for rde, version @value{VERSION}.

Copyright @copyright{} 2021 Andrew Tropin@*
@end copying

@dircategory System administration
@direntry
* rde: (rde).       Manage operating systems, dotfiles and development environments.
@end direntry

@dircategory Software development
@direntry
* rde Emacs: (rde)Emacs.      Emacs configuration with vanilla flavor.
@end direntry

@c @finalout
@titlepage
@title rde Manual
@author The rde Developers

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@node Top
@top rde

This document describes rde version @value{VERSION}, the GNU/Linux
distribution, a set of tools for managing development environments,
home environments, and operating systems, predefined configurations,
practices and workflows.

@menu
* Introduction::                What rde is?
* Community::                   The best rde part.
* Getting Started::             Try, customize and install.
* Features::                    All the parts of rde.
* Contributing::                Tips and guidelines.
* FAQ::                         Frequently asked questions.

* Acknowledgments::             Thanks!
* Concept Index::               Concepts.

@detailmenu
 --- The Detailed Node Listing ---

rde

* Principles::

@end detailmenu
@end menu

@node Introduction
@chapter rde

First of all rde is a developer and power user friendly GNU/Linux
operating system, ready for use with a few to zero tweaks.  Let's call
this part @dfn{rde GNU/Linux}.  Currently, it's targeted for single-user
setups, to some extent it can be used by multiple people on the same
machine, but with restrictions (@pxref{FAQ}).

Sometimes, it can be treated as an Emacs distribution, but while GNU
Emacs is an important part, in reality rde manages not only Emacs, its
packages and configurations, but other user space software too (which
often integrates with Emacs), let's call this part @dfn{rde home}.  In
addition to that, it can be used to manage home environments
(@pxref{Home Configuration,,, guix,}) on the operating system other
than rde GNU/Linux or Guix System.

@c TODO: Part about per-project rde tools.

@quotation
The project is in an active development stage, API is a subject to
change, watch rde-devel mailing list to be up to date with the latest
news.
@end quotation

While rde is ultimately hackable and can be completely changed and
customized according to someone's needs, features, programs and
configurations provided out of the box has a strong opinionated flavor
and follows a number of principles (@pxref{Principles}).  It's not
possible to cover all existing free software, provide sane
configurations and integrate it in rde, so we picked a tool for each
area based on its technical capabilities, interoperability with the
other programs and our own taste.  Focusing on only one tool for each
job, we can provide good defaults, integrate it deeply with the rest
of the system and make it pleasant and effortless to use, but due to
flexible design it is always possible to substitute it with other
alternative, however it can require some or a lot of work and
additional knowledge on the user side.

Take a brief look on the list of some tools we picked:
@include rde-tool-list.texi

Read the next section to get some ideas behind our choice. 

@menu
* Principles::
@end menu

@node Principles
@section Principles

There is a list of principles we try to follow to simplify decision
making process and provide a better understanding of our previous
choices for newcommers.  If you see some part of rde hardly violating
them please let us know.

@subsection Primary

@table @asis
@item Ergonomic
Sane keybindings, good contrast, and readable fonts.  The environment
should be safe and comfortable for long-lasting working sessions
@item Reproducible
Setup can be easily replicated.  It not only helps with sharing and
replicating setups, but also provides an ability to rollback to
working state in case of missconfiguration or other problems.
@item Hackable
Easy to explore, throw out or modify any part of setup.  We have
strong opinions on various aspects of working environments, but we
don't enforce them.
@item Stateless
All state must be explicit and syncable or temporary, that means all
the important data is backed up by default.  In combination with
reproducibility it gives a sense of security and confidence that both
your configurations and data are safe.
@end table

@subsection Secondary

This is a list of additional principles, which we find reasonable and
often refer to them.

@table @asis
@item Lightweight
Not only because of undepowered hardware, but also cause of
simplicity.  Slim solutions easier to understand, debug and fix.
@item Energy and battery efficient
Wayland, fast native applications.
@item Offline
Most of workflows and programs should work without network.
@item Peaceful
Attention-friendly, minimal use of notification and other distractive
things.
@end table


@c TODO: this items.
@c - [ ] Make mindeset section.  Be open minded, don't expect things to
@c   work as they do in different place, explore and get rewarded with so
@c   powerful and delightful workflows.  The real composability, not the
@c   one advertised by UNIX phylosophy.
@c   https://youtu.be/OE3mfOp5ZDI
@c - [ ] Reporting problem section (rde-discuss ML, guix describe,
@c   config, etc).

@node Community
@chapter Community

@section Approaching The Project

rde is a free/libre software (free as in a freedom), brought by
passioned volunteers.  It's not easy to explain the culture of the
project, we also don't have a formal code of conduct, but it seems
@dfn{rde people}, who forms the community and its culture are nice,
kind, smart, polite and well-minded.  We encourage you to join our
communication channels, learn how everything usually happens here and
try to make this cozy place only better, enjoy.

There are a plenty of useful resources: documentation, manuals, and
other learning materials, mailing lists and IRC channels, and of
course the source code.  Use any or all of them.  Some information
will be outdated, features will be missing and issues will be
appearing, it's in a nature of software, please share the ideas,
concerns, reports, suggestions and ask questions
(@pxref{Communication}), don't hesitate to provide fixes, features,
modifications or even experimental prototypes (@pxref{Contributing}).

@anchor{Communication}
@section Communication

The primary way of communication is mailing lists.  The development,
support, announcements happens here, and there are a few reasons why
(@pxref{Mailing Lists}).  For casual discussions, more interactive
support or just pleasant pastime we use IRC and Matrix.

@anchor{Mailing Lists}
@subsection Mailing Lists
Mailing lists are persistent and offline-friendly --- archives are
available and can be explored or even downloaded much later than
discussion took place, federated --- email is federated, anyone can
participate with already existing account from any email server,
accessible --- archives are additionally available over web-interface,
and almost everyone have an email address and can easily join.

There are a few @uref{https://lists.sr.ht/~abcdw, mailing lists} you
can subscribe and/or post with your existing email account:
@itemize
@item @uref{https://lists.sr.ht/~abcdw/rde-announce, ~abcdw/rde-announce@@lists.sr.ht}
for news and updates.
@item @uref{https://lists.sr.ht/~abcdw/rde-discuss, ~abcdw/rde-discuss@@lists.sr.ht}
for questions, discussions and support.
@item @uref{https://lists.sr.ht/~abcdw/rde-devel, ~abcdw/rde-devel@@lists.sr.ht}
for patches, development related discussions and bug reports.
@end itemize

@subsection Chat
We use IRC as our primary chatting platform for a number of reasons,
but the primary one is: it's hugely accessible --- IRC clients
available for almost each hardware and software platform, there are of
course web and mobile clients as well, no registration or other
additional steps are required.

Just join #tropin channel at @uref{https://libera.chat, libera.chat}.

IRC is a great tool for a real-time text-based communication.  You
join the channel when you need or want to and leave any time you
desire. @c (@pxref{IRC} to learn more).

It's also possible to connect to IRC channel via Matrix bridge using
#tropin:libera.chat room handle, learn more here:
https://libera.chat/guides/faq#can-i-connect-with-matrix

@node Getting Started
@chapter Getting Started

@c TODO: Explain how to fork rde

@c @node Channel introduction
@c @section Channel introduction

@c In case you want to use rde as a channel, add the following code to
@c your @code{~/.config/guix/channels.scm}, and call @code{guix pull}.
@c @example
@c (cons*
@c  (channel
@c   (name 'rde)
@c   (url "https://git.sr.ht/~abcdw/rde")
@c   (introduction
@c    (make-channel-introduction
@c     "257cebd587b66e4d865b3537a9a88cccd7107c95"
@c     (openpgp-fingerprint
@c      "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
@c  %default-channels)
@c @end example

@node Features
@chapter rde Features

@section rde Emacs
@c How Prot learning Emacs: https://youtu.be/46w9e4GAjsU

@c Emacs how undo works
@c https://casouri.github.io/note/2021/visual-undo-tree/index.html

@node Contributing
@chapter Contributing

@c TODO: Add process similar to srfi?
@c https://srfi.schemers.org/srfi-process.html

@c @menu
@c * New features, fixes or ideas: New features fixes or ideas.
@c * Documentation::
@c @end menu

@c @node New features fixes or ideas
@c @section New features, fixes or ideas

@c Send mails, optionally with inline patches to rde-devel mailing list.

@c @node Documentation
@c @section Documentation

@node FAQ
@chapter FAQ

TODO: Write about multi-user usage.

@node Acknowledgments
@chapter Acknowledgments

@node Concept Index
@unnumbered Concept Index
@printindex cp

@bye
