-*- mode: org -*-
#+STARTUP: showall
#+TODO: TODO IN-PROGRESS | DONE

* ~guix home~ Before Upstream Checklist
:PROPERTIES:
:VISIBILITY: children
:END:
** TODO Make fonts service
** TODO Add provenance
To make ~guix home describe~ more informative.
** TODO How to update env variables on reconfigure?
Also, how to make them available in format suitable for shepherd
services? Shepherd services takes env from shepherd.
** TODO Ensure style is correct
https://mumble.net/~campbell/scheme/style.txt
https://emacs-guix.gitlab.io/website/manual/latest/emacs-guix.html#Development
https://guix.gnu.org/manual/en/guix.html#Coding-Style
Add copyrights to source code
** TODO Cleanup utils module
Split into utils and configuration related helper?
** Finished
:PROPERTIES:
:VISIBILITY: folded
:END:
*** DONE Make symlink manager to check
if the file is modified by user before removing it, even if it already
under the control of guix home.
*** DONE Rewrite on-first-login script to guile
*** DONE Check it works on debian
*** DONE Implement zsh home-service
*** DONE Implement bash home-service
*** DONE Implement gnupg home-service
*** DONE Call on-reconfigure on reconfigure
*** DONE Add ~guix home search~
*** DONE Add ~list-generations~
*** DONE Add ~guix home roll-back/switch/delete~
*** DONE Fix environment-variables service
It's enough to make it accept pairs, it doesn't have to be list,
because value can be a gexp.
*** DONE Add XDG support to home-envirnoment
Set explicitly XDG_CONFIG_HOME and friends.
*** DONE Run ~guix home~ on 5 early adopters
**** DONE Establish/define support channels and schedule
Define schedule and add the information to announce.
- #guix IRC.
- rde-discuss mailing list.
- beweekly calls.
**** DONE Announce in rde-announce
**** DONE Announce in guix-devel
**** DONE Announce on stream
*** DONE Discuss xdg-flavor? default to #t
*** DONE Establish documenting workflow (write guideline)
*** DONE on-reconfigure -> activation
Refactor on-reconfigure service, it should be activation service,
because this script can be called on generation switch event and not
only on reconfigure.
* ~guix home~ Backlog
:PROPERTIES:
:VISIBILITY: children
:END:
** Browsers
*** TODO icecat
*** TODO ungoogled-chromium
- Browser extension
*** TODO nyxt
- Install extensions for Nyxt, see [[https://github.com/atlas-engineer/nyxt/blob/master/documents/EXTENSIONS.org#L1][here]]
** IN-PROGRESS Add on-change to on-reconfigure script?
For some apps to run some commands like restart if their configs updated
** TODO Comprehensive Email configuration
Things the user should be able to configure
- IMAP and SMTP info (e.g. address, username, port)
- PGP key
*** TODO Implement mail sync service
- isync/offlineimap/fetchmail/getmail
- Guix System already has a service for getmail, ~(gnu services getmail)~
- Integrate with mcron/state service
*** TODO Mail indexer
- notmuch/mu
*** TODO SMTP client
- msmtp/sendmail
** TODO Shepherd service for Sway?
** DONE sway
** DONE Emacs
Features:
- xdg-flavor? :: Use ~/.config/emacs/~
- separate-customize? :: Move customize to state dir
- no-init-el? :: Use default.el instead of init.el
- server-mode? :: Create shepherd service for emacs
** DONE pass
Also browser plugins and other stuff
* ~rde~ Backlog
:PROPERTIES:
:VISIBILITY: content
:END:
** Extensions mechanism
*** IN-PROGRESS Implement features -> he/os converter
** UI
*** TODO Visually separate sway workspaces for different workflows
- code
- communication
- multimedia
** General
*** TODO Implement pam_shepherd.so
Start user-space shepherd on first user login and exit on last logout.
- [[https://github.com/systemd/systemd/blob/c5b6b4b6d08cf4c16a871401358faeb5a186c02a/src/login/pam_systemd.c][pam_systemd.c]]
- https://www.opennet.ru/base/dev/pam_linux.txt.html
Take a look at mpd service for user-service example and /run/user/ID
creation.

*** IN-PROGRESS Create clean example configuration
~rde/config.scm~ is a ready to use configuration, but requires few
helpers to make it customizable by the end user.
