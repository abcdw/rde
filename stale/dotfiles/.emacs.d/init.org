#+TITLE: Simple emacs literate config
#+BABEL: :cache yes
#+STARTUP: content
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes :results none

* Tangle setup
Configuration from [[./init.org][init.org]] will be loaded by [[./init.el][init.el]].
** Org tangle-mangle

Each save triggers tangle process, which saves all code blocks to
~init.el~ and byte compile it to init.elc.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-

(setq user-emacs-directory (file-truename "~/.emacs.d/"))
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name "init.org" user-emacs-directory))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      ;; (byte-compile-file (expand-file-name "init.el" user-emacs-directory))
      )))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

* Old package setup
Old way to setup packages
** Init package system
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(require 'package)
(package-initialize)

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+END_SRC

** Package list

#+BEGIN_SRC emacs-lisp

(let* ((package--builtins nil)
       (packages
	'(
;; auto-compile	  ; automatically compile Emacs Lisp libraries
	  use-package
	  org
	  treemacs
	  beacon
	  clj-refactor ; A collection of clojure refactoring functions
	  docker
	  dockerfile-mode
	  ivy
	  swiper
	  counsel
	  avy				; jump to visible characters
	  rainbow-delimiters
	  base16-theme
	  nord-theme
	  leuven-theme
	  paredit	; minor mode for editing parentheses
	  projectile	; Manage and navigate projects in Emacs easily
	  rust-mode
	  yaml-mode
	  nix-mode
	  markdown-mode
	  writeroom-mode
	  plantuml-mode
	  ob-restclient
	  org-super-agenda
	  origami
	  major-mode-hydra
	  ivy-rich
	  )))	      ; Display available keybindings in popup
  (ignore-errors
    (let ((packages (cl-remove-if 'package-installed-p packages)))
      (when packages
	;; Install uninstalled packages
	(package-refresh-contents)
	(mapc 'package-install packages)))))
#+END_SRC

* use-package with categories
** Git
*** Time Machine
Go back in a git history for current file.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :defer t)
#+END_SRC

*** Magit
Good interface for git.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :ensure t
  :after magit
  :hook (magit-mode-hook . magit-todos-mode))
#+END_SRC

*** Git link
Generates a link to github or other remote for current file and line.

#+BEGIN_SRC emacs-lisp
(use-package git-link
  :ensure t)
#+END_SRC

** Slides
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure t)
(use-package htmlize
  :ensure t)
#+END_SRC

** Tools
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t)
#+END_SRC

** Programming
*** Cider
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :pin melpa-stable
  :custom
  cider-known-endpoints
  '(("local-front" "localhost" "7888")
    ("local-back" "localhost" "7889")))
#+END_SRC

*** JabaScript

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :init
  (setq-default js2-basic-indent 2
                js2-basic-offset 2
                js2-auto-indent-p t
                js2-cleanup-whitespace t
                js2-enter-indents-newline t
                js2-indent-on-enter-key t))
#+END_SRC

** Ivy related stuff
*** AMX (Better M-x)
Makes commands sorted by popularity for M-x.

#+BEGIN_SRC emacs-lisp
(use-package amx :ensure t :defer t
  :custom (amx-save-file "~/.cache/amx-item"))
#+END_SRC

** Utility
*** direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
  :ensure t
  :config
  (direnv-mode))
#+END_SRC
*** Company
Autocompletion framework.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :hook
  (after-init . global-company-mode)
  :bind (:map company-active-map
     ("C-n" . company-select-next-or-abort)
     ("C-p" . company-select-previous-or-abort)))
#+END_SRC

*** Company quickhelp
Show tooltip next to autocompletion popup.

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :ensure t
  :hook (prog-mode . company-quickhelp-mode))
#+END_SRC

*** move text
~M-up~ and ~M-down~ for moving.
~C-M-up~ and ~C-M-down~ for duplicating.

#+BEGIN_SRC emacs-lisp
(use-package move-dup
  :ensure t
  :init (global-move-dup-mode)
  :hook (org-mode . (lambda () (move-dup-mode -1))))
#+END_SRC

*** eshell-toggle
Allows to toggle term and uses a projectile for finding the root of
the project.

#+BEGIN_SRC emacs-lisp
(use-package eshell-toggle
  :ensure t
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  ;;(eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  ;; :quelpa
  ;; (eshell-toggle :repo "4DA/eshell-toggle" :fetcher github :version original)
  :bind
  ("s-`" . eshell-toggle))
#+END_SRC

*** Smart comment
Comment line when you are in the middle of the line.

#+BEGIN_SRC emacs-lisp
(use-package smart-comment
  :ensure t
  :bind ("M-;" . smart-comment))
#+END_SRC

*** Comment sexp

#+BEGIN_SRC emacs-lisp
(use-package comment-or-uncomment-sexp
  :ensure t
  :bind ("C-M-;" . comment-or-uncomment-sexp))
#+END_SRC

*** Recent files and save place
Automatically save list of recent files

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure t
  :demand t
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 200)
  ;; (recentf-exclude '((expand-file-name package-user-dir)
  ;;                    "COMMIT_EDITMSG\\'"))
  )

;; When buffer is closed, saves the cursor location
(use-package saveplace
  :config (save-place-mode))
;; save-place-file (concat user-emacs-directory "places")

#+END_SRC

** Better defaults
*** Coding system

#+BEGIN_SRC emacs-lisp
(use-package mule
  :config
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-terminal-coding-system 'utf-8))
#+END_SRC

*** GUI
Disable gui elements

#+BEGIN_SRC emacs-lisp
(use-package tool-bar
  :config
  (tool-bar-mode -1))

(use-package scroll-bar
  :config
  (scroll-bar-mode -1))

(use-package menu-bar
  :config
  (menu-bar-mode -1))

(use-package tooltip
  :defer t
  :custom
  (tooltip-mode -1))

#+END_SRC

*** Which key
Show following keybindings for incomplete chord.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :if (< (length command-line-args) 2)
  :custom
  (dashboard-banner-logo-title "With Great Power Comes Great Responsibility")
  (dashboard-center-content t)
  (dashboard-items
   '((agenda . 8)
     (projects . 6)
     (recents . 5)
     ))
  (dashboard-set-file-icons t)
  (dashboard-set-heading-icons t)
  (dashboard-set-init-info nil)
  (dashboard-set-navigator t)
  (dashboard-startup-banner 1)
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** Prettication

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)

;; (use-package mood-line
;;   :config (mood-line-mode 1))
#+END_SRC

* Some minor configurations
Old way for configuration without use-package

*** Modes
**** Global modes

#+BEGIN_SRC emacs-lisp
(dolist (mode
	 '(projectile-global-mode
	   column-number-mode
	   beacon-mode
	   yas-global-mode
	   show-paren-mode
	   ivy-mode
	   counsel-mode
	   org-super-agenda-mode
	   ;; global-whitespace-mode
	   ))
  (funcall mode 1))
#+END_SRC

**** Per language modes.
#+BEGIN_SRC emacs-lisp
(dolist (mode '(cider-repl-mode
                clojure-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
		rainbow-delimiters-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))

(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
(add-hook 'org-agenda-mode-hook 'origami-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

**** org mode

#+BEGIN_SRC emacs-lisp

(setq org-directory "~/work/org-files")
(setq org-default-notes-file (concat org-directory "/todo.org"))
(setq org-archive-location (concat org-directory "/archived.org::"))
(setq org-agenda-files (list (concat org-directory "/todo.org")
			     (concat org-directory "/tropin.org")))
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))))
(setq org-hide-leading-stars t)
(setq org-fontify-whole-heading-line t)
(setq org-catch-invisible-edits 'smart)
(setq org-log-into-drawer t)
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)


(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell      . t)
   (emacs-lisp . t)
   (calc       . t)
   (clojure    . t)
   (python     . t)
   (restclient . t)
   (dot        . t)
   (ditaa      . t)
   (css        . t)
   (plantuml   . t)))

(defun org-babel-execute:yaml (body params) body)

(setq org-babel-clojure-backend 'cider)
;; (setq org-src-fontify-natively t)
(setq org-edit-src-content-indentation 0
    org-src-tab-acts-natively t
    org-src-preserve-indentation t)
(setq org-src-window-setup 'current-window)
(setq org-link-file-path-type 'relative)
(setq org-export-backends '(html md latex ascii icalendar odt))

(setq org-log-done 'time)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n!)" "|" "DONE(d!)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "DELEGATED(D@/!)" "|" "CANCELLED(c@/!)" "SOMEDAY(s)" "MEETING(m)"))))

(setq org-todo-keyword-faces
      (quote (("NEXT" :foreground "forest green" :weight bold :background "light green"
               :box (:line-width 1 :color "forest green"))
              ("WAITING" :foreground "orange" :weight bold :background "light organe"
               :box (:line-width 1 :color "orange"))
              ("HOLD" :foreground "blue" :weight bold :background "light blue"
               :box (:line-width 1 :color "blue"))
              )))

(setq org-agenda-skip-scheduled-if-done nil)

(setq org-super-agenda-groups
      '((:name "Currently working"
               :todo "NEXT")
        (:name "Today WAITING/HOLD"
               :and (:scheduled today
                                :todo ("WAITING" "HOLD")))
        (:name "Today TODO"
               :and (:scheduled today
                                :todo "TODO"))

        (:name "Scheduled"
               :scheduled future)

        (:name "Week plan"
               :tag "Week")

        (:name "To Refile"
               :category "inbox")

        (:name "Backlog"
               :todo "TODO")
        (:name "DONE"
               )))

(defvar osa/org-super-agenda-auto-show-groups
  '("Currently working" "Today WAITING" "Today TODO"))

(defun osa/org-super-agenda-origami-fold-default ()
    "Fold certain groups by default in Org Super Agenda buffer."
    (forward-line 3)
    (cl-loop do (origami-forward-toggle-node (current-buffer) (point))
             while (origami-forward-fold-same-level (current-buffer) (point)))
    (--each osa/org-super-agenda-auto-show-groups
      (goto-char (point-min))
      (when (re-search-forward (rx-to-string `(seq bol " " ,it)) nil t)
        (origami-show-node (current-buffer) (point)))))

(add-hook 'org-agenda-finalize-hook 'osa/org-super-agenda-origami-fold-default)

(setq org-capture-templates
      `(("t" "Task" entry
         (file+headline "~/org/todo.org" "Inbox")
         "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
        ("c" "Today task" entry
         (file+headline "~/org/todo.org" "Inbox")
         "* TODO %?\nSCHEDULED: %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
	("m" "Meeting" entry
         (file+headline "~/org/todo.org" "Meetings")
         "* MEETING %?\n:PROPERTIES:\n:CREATED: %U\n:END:\nParticipants:\nAgenda:\n- [ ] \nResults:\n- \n\n")
	("w" "Weekly life review" entry
         (file+headline "~/org/todo.org" "Weekly reviews")
         "* TODO [/] Life review %t\n:PROPERTIES:\n:CREATED: %U\n:END:\n
- [ ] Review agenda%?
- [ ] Review tasks
\n\n")
        ("q" "Quick note" entry
         (file+headline "~/org/todo.org" "Notes")
         "* %? :Note:\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
        ))
#+END_SRC

**** PlantUML
# #+NAME: plantuml-jar
# #+BEGIN_SRC sh :results silent :tangle no
# readlink `which plantuml` | sed 's;/bin/;/lib/;' | sed 's;/plantuml$;/plantuml.jar;'
# #+END_SRC

# #+BEGIN_SRC emacs-lisp :var plantuml-jar=plantuml-jar() :results silent
# (setq plantuml-jar-path plantuml-jar)
# (setq plantuml-default-exec-mode 'jar)
# (setq org-plantuml-jar-path plantuml-jar-path)
# #+END_SRC

*** Look and feel

**** Better defaults
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
;;(load-theme 'nord t)
(load-theme 'leuven t)
;;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;; (setq ivy-posframe-border-width 10)
;; (ivy-posframe-mode 1)

(setq ivy-initial-inputs-alist nil)
(ivy-rich-mode 1)
(add-hook 'minibuffer-setup-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'ansi-term-setup-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'eshell-setup-hook (lambda () (setq show-trailing-whitespace nil)))
;;  (setq ivy-posframe-display-functions-alist '((t . nil)))
;;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))


;; (load-theme 'doom-tomorrow-day t)
;; (load-theme 'base16-tomorrow t)

(set-face-attribute 'default nil :font "Iosevka 12" :width 'Regular)

;; blink modeline instead of beep
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(setq vc-follow-symlinks t)

(setq save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      backup-directory-alist `(("." . ,(concat user-emacs-directory
					       "backups"))))
(setq create-lockfiles nil)

(global-set-key [remap list-buffers] 'ibuffer)

(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Keybindings
**** Cheatsheet
| key       | description       |
|-----------+-------------------|
| ~C-M-SPC~ | Select sexp       |
| ~M-;~     | Comment something |
**** Windows and buffers

All keybindings starting with ~super~ key are buffers or windows
related. Keybindings with ~C-s-~ prefix operates on other window.
#+BEGIN_SRC emacs-lisp

(defun kill-other-window-buffer ()
  "Kill buffer in other window"
  (interactive)
  (other-window 1)
  (kill-this-buffer)
  (other-window -1))

(defun kill-other-window-and-buffer ()
  "Kill buffer in other window"
  (interactive)
  (other-window 1)
  (kill-this-buffer)
  (delete-window))

(defun prev-window ()
  (interactive)
  (other-window -1))

(defun switch-to-next-buffer-other-window ()
  (interactive)
  (switch-to-next-buffer (next-window)))

(defun switch-to-prev-buffer-other-window ()
  (interactive)
  (switch-to-prev-buffer (next-window)))

(defun maximize-other-window ()
  (interactive)
  (other-window 1)
  (delete-other-windows))

(global-set-key (kbd "s-w") #'kill-current-buffer)
(global-set-key (kbd "s-o") #'other-window)
(global-set-key (kbd "s-n") #'switch-to-next-buffer)
(global-set-key (kbd "s-p") #'switch-to-prev-buffer)
(global-set-key (kbd "s-q") #'kill-buffer-and-window)
(global-set-key (kbd "s-m") #'delete-other-windows)
;; (global-set-key (kbd "s-TAB") #'alternate-buffer)
(global-set-key (kbd "C-s-n") 'switch-to-next-buffer-other-window)
(global-set-key (kbd "C-s-p") 'switch-to-prev-buffer-other-window)
(global-set-key (kbd "C-s-w") #'kill-other-window-and-buffer)
(global-set-key (kbd "C-s-m") #'maximize-other-window)
(global-set-key (kbd "s-a") #'projectile-toggle-between-implementation-and-test)
(global-set-key (kbd "s-f") #'counsel-projectile)
(defhydra hydra-window-menu
  (:color pink :hint nil)
  ("o" other-window "other window" :column "windows")
  ("O" other-window "other window" :color blue)
  ("s" split-window-right "split right")
  ("S" split-window-right "split right" :color blue)
  ("w" kill-other-window-buffer "kill other window buffer" :column "buffers")
  ("W" kill-other-window-buffer "kill other window buffer" :color blue)
  ("n" switch-to-next-buffer "next buffer")
  ("p" switch-to-prev-buffer "prev buffer")
  ("M-n" (switch-to-next-buffer (next-window)) "next buffer other window")
  ("M-p" (switch-to-prev-buffer (next-window)) "prev buffer other window")
  ("q" nil "quit" :column "quit"))
#+END_SRC

**** Global hydra
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "M-o")
 (defhydra hydra-global-menu
   (:color blue :hint nil)
   ("p f" projectile-find-file "find file" :color blue :column "project")
   ("p t" treemacs-select-window "tree" :color blue)
   ("p b" counsel-projectile-switch-to-buffer "buffers" :color blue)
   ("p p" counsel-projectile-switch-project "switch" :color blue)
   ("t t" treemacs "tree" :color blue :column "toggle")
   ("f r" counsel-recentf "recentf" :color blue :column "files")
   ("f e" (lambda () (interactive) (find-file "~/.emacs.d/init.org")) "init.org")
   ("f i" (lambda () (interactive) (find-file "~/configs/etc/nixos/configuration.ixy.nix")) "ixy.nix")
   ("f t" (lambda () (interactive) (find-file (expand-file-name "todo.org" org-directory))) "todo.org")
   ("f o" (lambda () (interactive) (find-file org-directory)) "org file")
   ("f c c" (lambda () (interactive) (find-file "~/configs/dotfiles/.config")) "configs")
   ("f c b" (lambda () (interactive) (find-file "~/.config/bspwm/bspwmrc")) "bspwmrc")
   ("f c r" (lambda () (interactive) (find-file "~/.config/bspwm/external_rules")) "bspwmrc rules")
   ("f c s" (lambda () (interactive) (find-file "~/.config/sxhkd/sxhkdrc")) "sxhkdrc")
   ("h o" org-info "org mode info" :column "help" :color blue)
   ("s s" counsel-rg "ripgrep" :color blue :column "search")
   ("n w" widen "widen" :column "narrow")
   ("n s" org-narrow-to-subtree "subtree")
   ("n e" org-narrow-to-element "element")
   ("n z" writeroom-mode "zen mode")
   ("o t" org-todo-list "todo" :column "org" :color blue)
   ("o a" org-agenda-list "agenda")
   ("o c" org-columns "columns")
   ("o b" org-switchb "switch buffer")
   ("o o" org-open-at-point "open link")
   ("v d" vc-diff "vc-diff" :column "vc")
   ("w" hydra-window-menu/body "window/buffer menu" :column "hydras")
   ))


;; (global-set-key (kbd "s-e") 'hydra-global-menu/body)

#+END_SRC

#+RESULTS:
: hydra-global-menu/body

**** Major hydra
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-e") #'major-mode-hydra)

(major-mode-hydra-define org-mode nil
  ("Refile"
   (("r" org-refile "refile"))
   "Export"
   (("s-e" org-reveal-export-to-html "reveal export"))))

(major-mode-hydra-define clojure-mode nil
  ("Eval"
   (("e e" 'cider-eval-last-sexp "eval last sexp")
    ("e f" 'cider-eval-defun-at-point "eval form")
    ("e p" 'cider-pprint-eval-defun-at-point "eval form with pprint")
    )))
#+END_SRC

**** Misc
#+BEGIN_SRC emacs-lisp
(add-hook 'cider-repl-mode-hook (lambda () (local-set-key (kbd "C-l") 'cider-repl-clear-buffer)))

(define-key org-super-agenda-header-map (kbd "<tab>") #'origami-toggle-node)

(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "s-.") 'ace-window)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-;") 'avy-goto-char)
(global-set-key (kbd "C-S-s") 'swiper)
(global-set-key (kbd "C-c g") 'counsel-rg)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "C-?") 'help-command)

#+END_SRC

#+RESULTS:
: magit-status

*** Whitespaces
Show trailing whitespaces and cleanup them on save.

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing spaces space-mark))
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile :ensure t)
(use-package projectile
  :ensure t
  :init
  (setq projectile-completion-system 'ivy)
  (setq projectile-create-missing-test-files t)
  (setq projectile-project-search-path '("~/work/")))
#+END_SRC

*** Other stuff
**** Backup and autosave
#+BEGIN_SRC emacs-lisp
(let ((my-auto-save-dir (locate-user-emacs-file "auto-save")))
  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name "\\2" my-auto-save-dir) t)))
  (unless (file-exists-p my-auto-save-dir)
    (make-directory my-auto-save-dir)))

(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/auto-save/" t)))
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC

* Credits

Thanks for inspiration to [[https://github.com/mitrx][Dmitry Alexeev]].
